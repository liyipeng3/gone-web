generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model comments {
  coid      Int     @id @default(autoincrement()) @db.UnsignedInt
  cid       Int?    @default(0) @db.UnsignedInt
  created   Int?    @default(0) @db.UnsignedInt
  author    String? @db.VarChar(200)
  authorId  Int?    @default(0) @db.UnsignedInt
  ownerId   Int?    @default(0) @db.UnsignedInt
  mail      String? @db.VarChar(200)
  url       String? @db.VarChar(200)
  ip        String? @db.VarChar(64)
  agent     String? @db.VarChar(200)
  text      String? @db.Text
  type      String? @default("comment") @db.VarChar(16)
  status    String? @default("approved") @db.VarChar(16)
  parent    Int?    @default(0) @db.UnsignedInt
  authorImg String? @db.VarChar(500)

  @@index([cid], map: "cid")
  @@index([created], map: "created")
}

model fields {
  cid         Int     @db.UnsignedInt
  name        String  @db.VarChar(200)
  type        String? @default("str") @db.VarChar(8)
  str_value   String? @db.Text
  int_value   Int?    @default(0)
  float_value Float?  @default(0) @db.Float

  @@id([cid, name])
  @@index([float_value], map: "float_value")
  @@index([int_value], map: "int_value")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model gallery {
  gid         Int     @id @default(autoincrement()) @db.UnsignedInt
  thumb       String? @db.VarChar(200)
  image       String? @db.VarChar(200)
  sort        Int?    @default(0)
  name        String? @db.VarChar(200)
  description String? @db.VarChar(200)
  order       Int?    @default(0) @db.UnsignedInt
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model links {
  lid         Int     @id @default(autoincrement()) @db.UnsignedInt
  name        String? @db.VarChar(200)
  url         String? @db.VarChar(200)
  sort        String? @db.VarChar(200)
  image       String? @db.VarChar(200)
  description String? @db.VarChar(200)
  user        String? @db.VarChar(200)
  order       Int?    @default(0) @db.UnsignedInt
}

model metas {
  mid           Int             @id @default(autoincrement()) @db.UnsignedInt
  name          String?         @db.VarChar(200)
  slug          String?         @db.VarChar(200)
  type          String          @db.VarChar(32)
  description   String?         @db.VarChar(200)
  count         Int?            @default(0) @db.UnsignedInt
  order         Int?            @default(0) @db.UnsignedInt
  parent        Int?            @default(0) @db.UnsignedInt
  relationships relationships[]

  @@index([slug], map: "slug")
}

model options {
  name  String @id @db.VarChar(32)
  value Int
}

model posts {
  cid           Int             @id @default(autoincrement()) @db.UnsignedInt
  uid           Int?            @default(1)
  title         String?         @db.VarChar(200)
  slug          String?         @unique(map: "slug") @db.VarChar(200)
  created       Int?            @default(0) @db.UnsignedInt
  modified      Int?            @default(0) @db.UnsignedInt
  text          String?         @db.LongText
  order         Int?            @default(0) @db.UnsignedInt
  type          String?         @default("post") @db.VarChar(16)
  status        String?         @default("publish") @db.VarChar(16)
  password      String?         @db.VarChar(32)
  commentsNum   Int?            @default(0) @db.UnsignedInt
  allowComment  String?         @default("0") @db.Char(1)
  parent        Int?            @default(0) @db.UnsignedInt
  viewsNum      Int?            @default(0)
  likesNum      Int?            @default(0)
  relationships relationships[]

  @@index([created], map: "created")
}

model relationships {
  cid   Int   @db.UnsignedInt
  mid   Int   @db.UnsignedInt
  posts posts @relation(fields: [cid], references: [cid], onDelete: Cascade, map: "cid")
  metas metas @relation(fields: [mid], references: [mid], onDelete: Cascade, map: "mid")

  @@id([cid, mid])
  @@index([cid], map: "cid")
  @@index([mid], map: "mid")
}

model users {
  uid        Int     @id @default(autoincrement()) @db.UnsignedInt
  username   String? @unique(map: "name") @db.VarChar(32)
  password   String? @db.VarChar(64)
  mail       String? @unique(map: "mail") @db.VarChar(200)
  url        String? @db.VarChar(200)
  screenName String? @db.VarChar(32)
  created    Int?    @default(0) @db.UnsignedInt
  activated  Int?    @default(0) @db.UnsignedInt
  logged     Int?    @default(0) @db.UnsignedInt
  group      String? @default("visitor") @db.VarChar(16)
  authCode   String? @db.VarChar(64)
}
